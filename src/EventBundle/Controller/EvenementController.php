<?php

namespace EventBundle\Controller;


use EventBundle\Entity\Evenement;
use EventBundle\Entity\Participants;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;


use EventBundle\Form\EvenementType;

use Symfony\Component\HttpFoundation\Response;



class EvenementController extends Controller
{


    public function __construct()
    {

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function indexAction(Request $request)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();


        $em = $this->getDoctrine()->getManager();

        $evenement = new Evenement();
        $form = $this->createForm(EvenementType::class, $evenement);
        $form->handleRequest($request);


        if ($form->isSubmitted() && $form->isValid()) {

            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $evenement->getImage();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $evenement->setImage($fileName);

            // ... persist the $product variable or any other work

//            return $this->redirect($this->generateUrl('app_product_list'));

            $evenement->setResponsable($user);
            if ($evenement->getDateFin() > $evenement->getDateDebut()) {
                $diff = date_diff($evenement->getDateFin(), $evenement->getDateDebut());
                if ($diff->m < 6) {
                    $dateCreation = new\DateTime('now');
                    $evenement->setDateCreation($dateCreation);
                    $em->persist($evenement);
                    $em->flush();
                }
            }

            //   $this->envoyerEmail($evenement);
            //    return array('id' => $evenement->getId());
//            return $this->redirectToRoute('evenement_index');

        }

        $evenements = $this->getDoctrine()->getRepository('EventBundle:Evenement')->findAll();
        $myevents = $this->getDoctrine()->getRepository('EventBundle:Evenement')->findByResponsable($user);

        return $this->render('@Event/evenement/index.html.twig', array('myevents' => $myevents, 'evenements' => $evenements, 'form' => $form->createView()));
    }


    public function deleteAction($id)
    {

        $sn = $this->getDoctrine()->getManager();
        $event = $sn->getRepository('EventBundle:Evenement')->find($id);
        $sn->remove($event);
        $sn->flush();
        return $this->redirectToRoute('evenement_index');

    }


    public function detailAction($id, Request $request)
    {

        $sn = $this->getDoctrine()->getManager();
        $event = $sn->getRepository('EventBundle:Evenement')->find($id);

        if ($request->isMethod("post")) {
            $event->setNomEvenement($request->get('nomEvenement'));
            $event->setType($request->get('type'));
            $event->setAdr($request->get('adr'));
            $event->setDescription($request->get('description'));
            if ($request->files->get('image')) {
                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
                $file = $request->files->get('image');
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
                $event->setImage($fileName);

            }

            $event->setCode($request->get('code'));
            $event->setNbreplace($request->get('nbreplace'));
            $event->setVille($request->get('ville'));
            $event->setDateDebut(new\DateTime($request->get('dateDebut')));
            $event->setDateFin(new\DateTime($request->get('dateFin')));
            $sn = $this->getDoctrine()->getManager();
            $sn->flush();

            return $this->redirectToRoute('evenement_detail',['id'=>$event->getId()]);
        }


        return $this->render('@Event/evenement/detail.html.twig', array('event' => $event));

    }


    public function modifyAction(Request $request)
    {

        $em = $this->getDoctrine()->getManager();
        $titre = $request->get('event');
        $start = $request->get('datedebut');
        $end = $request->get('datefin');
        $user = $request->get('user');
        $evenement = $em->getRepository(Evenement::class)->findOneBy(array("nomEvenement" => $titre));
        if ($user != $evenement->getResponsable()->getId()) {
            return new Response("no");
        }
        $evenement->setDateDebut(new \DateTime($start));
        $evenement->setDateFin(new \DateTime($end));
        $em->merge($evenement);
        $em->flush();
        return new Response("yes");
    }



    public function listParticipateAction($id)
    {
        $em = $this->getDoctrine()->getManager();

        $events = $em->getRepository("EventBundle:Evenement")->find($id);
        $part = $em->getRepository("EventBundle:Participants")->findByEvenement($events);
        return $this->render('@Event\evenement\participate.html.twig', array("events" => $part));
    }

    public function MyParticipateAction()
    {
        $em = $this->getDoctrine()->getManager();
        $part = $em->getRepository("EventBundle:Participants")->findByUserid($this->getUser());
        return $this->render('@Event\evenement\participate.html.twig', array("events" => $part));
    }

    public function acceptParticipationAction($id){

        $event = $this->getDoctrine()->getManager();
        $invitation = $event->getRepository('EventBundle:Participants')->find($id);
        $invitation->setConfirmation(1);
        $ev = $invitation->getEvenement();
        $ev->setNbreplace($ev->getNbreplace()-1);
        $event->persist($ev);
        $event->persist($invitation);
        $event->flush();

        return $this->redirectToRoute('list_participate', array('id' => $invitation->getEvenement()->getId()));

    }

    public function RefuseParticipationAction($id){

        $event = $this->getDoctrine()->getManager();
        $invitation = $event->getRepository('EventBundle:Participants')->find($id);
        $event->remove($invitation);
        $event->flush();

        return $this->redirectToRoute('list_participate', array('id' => $invitation->getEvenement()->getId()));

    }


    public function participerAction($id)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();

        $m = $this->getDoctrine()->getManager();
        $event = $m->getRepository('EventBundle:Evenement')->find($id);
        $existe = $m->getRepository('EventBundle:Participants')->findBy(array('userid' => $user, 'evenement' => $id));
        if ($existe == null) {
            $m->persist($event);
            $participe = new Participants();
            $participe->setEvenement($event);
            $participe->setUserid($user);
            $participe->setConfirmation(0);
            $participe->setDateInscrit(new \DateTime('now'));
            $m->persist($participe);
            $m->flush();


            return $this->redirectToRoute('MyParticipate');
        } else {
            return $this->redirectToRoute('evenement_index');
        }
    }



    public function pdfAction()
    {
        $snappy = $this->get('knp_snappy.pdf');

        //  $html = '<h1>Hello</h1>';
        $html = $this->renderView("evenement/pdf.html.twig");
        $filename = 'myFirstSnappyPDF';

        return new Response(
            $snappy->getOutputFromHtml($html),
            200,
            array(
                'Content-Type' => 'application/pdf',
                'Content-Disposition' => 'inline; filename="' . $filename . '.pdf"'
            )
        );
    }


    public function envoyerMailAction()
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $transport = (new \Swift_SmtpTransport('smtp.gmail.com', 587, 'tls'))
            ->setUsername('esprit.worldfriendship@gmail.com')
            ->setPassword('sassouki');
        $mailer = new \Swift_Mailer($transport);
        $message = (new \Swift_Message('Confirmation du participation'))
            ->setFrom('esprit.worldfriendship@gmail.com')
            ->setTo($user->getEmail())
            ->setBody(
                $this->renderView(
                // templates/emails/registration.html.twig
                    '@Event/Evenement/Confirmation.html.twig',
                    array('name' => $user->getNom(),)
                ),
                'text/html'
            );
        /* @var $mailer \Swift_Mailer */

        $mailer->send($message);


        return $this->listParticipateAction();

    }


}







